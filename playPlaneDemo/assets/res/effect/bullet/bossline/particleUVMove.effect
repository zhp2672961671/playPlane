CCEffect %{
  temporaries:
    b1: &b1
      targets:
      - blend: true
        blendSrc: src_alpha
        blendDst: one
        blendSrcAlpha: src_alpha
        blendDstAlpha: one
    b2: &b2
      targets:
      - blend: true
        blendSrc: src_alpha
        blendDst: one_minus_src_alpha
        blendSrcAlpha: src_alpha
        blendDstAlpha: one_minus_src_alpha
    b3: &b3
      targets:
      - blend: true
        blendSrc: dst_color
        blendDst: one
        blendSrcAlpha: zero
        blendDstAlpha: dst_alpha
    d1: &d1 { depthTest: true, depthWrite: false }
    r1: &r1 { cullMode: none }
    p1: &p1
      mainTexture:            { value: grey }
      maskTexture:    { value: black }
      noiseTexture:    { value: black }
      mainTiling_Offset:      { value: [1, 1, 0, 0]  }
    p2: &p2
      <<: *p1
      tintColor:              { value: [0.5, 0.5, 0.5, 0.5], editor: { type: color } }
      maskTilingOffset:      { value: [1, 1, 0, 0]  }
      textureMoveSpeed:      { value: [0, 0] }
      noiseStrength:   { value: [1, 1] }
      noiseMoveSpeed:   { value: [0, 0] }

  techniques:
  - name: add
    passes:
    - vert: tinted-vs:lpvs_main
      frag: tinted-fs:add
      rasterizerState: *r1
      depthStencilState: *d1
      blendState: *b1
      properties: *p2
  - name: multiply
    passes:
    - vert: tinted-vs:lpvs_main
      frag: tinted-fs:multiply
      rasterizerState: *r1
      depthStencilState: *d1
      blendState: *b1
      properties: *p2
}%

// TODO: soft particle
CCProgram tinted-vs %{
  precision highp float;
  #include <common/math/transform>
  #include <builtin/internal/particle-common>
  #include <builtin/uniforms/cc-local>

  in vec3 a_position; // center position
  in vec3 a_texCoord;  // xy:vertex index,z:frame index
  in vec3 a_texCoord1; // size
  in vec3 a_texCoord2; // rotation
  in vec4 a_color;

  #if CC_RENDER_MODE == RENDER_MODE_STRETCHED_BILLBOARD
    in vec3 a_color1; // velocity.x, velocity.y, velocity.z, scale
  #endif

  #if CC_RENDER_MODE == RENDER_MODE_MESH
    in vec3 a_texCoord3;  // mesh vertices
    in vec3 a_normal;     // mesh normal
    in vec4 a_color1;     // mesh color
  #endif

  #if USE_MASK_COLOR
    out vec2 v_uvM;
    uniform TexMCoords {
      vec4 maskTilingOffset; 
    };
  #endif

  vec4 lpvs_main () {
    vec3 compScale = scale.xyz * a_texCoord1;
    vec4 pos = vec4(a_position, 1);
    #if CC_RENDER_MODE == RENDER_MODE_STRETCHED_BILLBOARD
      vec4 velocity = vec4(a_color1.xyz, 0);
    #endif

    #if !CC_USE_WORLD_SPACE
      // simulate in world space. apply cc_matWorld matrix on CPU side.
      pos = cc_matWorld * pos;
      #if CC_RENDER_MODE == RENDER_MODE_STRETCHED_BILLBOARD
        velocity = cc_matWorld * velocity;
      #endif
    #endif

    #pragma define INDENTIFY_NEG_QUAT 10.0

    vec3 rotTmp = a_texCoord2;
    float mulFactor = 1.0;
    if (rotTmp.x > INDENTIFY_NEG_QUAT * 0.5) {
        rotTmp.x -= INDENTIFY_NEG_QUAT;
        mulFactor = -1.0;
    }
    vec4 rot = vec4(rotTmp, 0.0);
    rot.w = mulFactor * sqrt(1.0 - rot.x * rot.x - rot.y * rot.y - rot.z * rot.z);

    #if CC_RENDER_MODE != RENDER_MODE_MESH
      vec2 cornerOffset = vec2((a_texCoord.xy - 0.5));

      #if CC_RENDER_MODE == RENDER_MODE_BILLBOARD || CC_RENDER_MODE == RENDER_MODE_VERTICAL_BILLBOARD
        computeVertPos(pos, cornerOffset, rot, compScale, cc_matViewInv);
      #elif CC_RENDER_MODE == RENDER_MODE_STRETCHED_BILLBOARD
        computeVertPos(pos, cornerOffset, rot, compScale, cc_cameraPos.xyz, velocity, frameTile_velLenScale.z, frameTile_velLenScale.w, a_texCoord.x);
      #elif RENDER_MODE_HORIZONTAL_BILLBOARD
        computeVertPos(pos, cornerOffset, rot, compScale);
      #endif

      color = a_color;
    #else
      mat4 xformNoScale = matrixFromRT(rot, pos.xyz);
      mat4 xform = matFromRTS(rot, pos.xyz, compScale);
      pos = xform * vec4(a_texCoord3, 1);
      vec4 normal = xformNoScale * vec4(a_normal, 0);
      color = a_color * a_color1;
    #endif
    uv = computeUV(a_texCoord.z, a_texCoord.xy, frameTile_velLenScale.xy) * mainTiling_Offset.xy + mainTiling_Offset.zw;

    #if USE_MASK_COLOR
      v_uvM = computeUV(a_texCoord.z, a_texCoord.xy, frameTile_velLenScale.xy) * maskTilingOffset.xy + maskTilingOffset.zw;
    #endif

    pos = cc_matViewProj * pos;

    return pos;
  }
}%

CCProgram tinted-fs %{
  precision mediump float;
  #include <legacy/output>

  in vec2 uv;
  in vec4 color;

  uniform FragConstants {
    vec4 tintColor;
  };

  #if USE_TEXTURE
    uniform sampler2D mainTexture;
    uniform ConstTextureMove{
        vec2 textureMoveSpeed;
    };
  #endif

  #if USE_NOISE_TEXTURE
    uniform sampler2D noiseTexture;
    uniform ConstNoiseTexture{
      vec2 noiseStrength;
    };
    #if USE_NOISE_MOVE
    #endif

    uniform ConstNoiseMove{
      vec2 noiseMoveSpeed;
    };
  #endif

  #if USE_MASK_COLOR
    in vec2 v_uvM;
    uniform sampler2D maskTexture;
  #endif

  vec4 add () {
    vec4 col = color * tintColor * 2.0;
    vec2 uv1 = uv;
    #if USE_TEXTURE
        #if USE_TEXTURE_MOVE
          uv1.x = uv1.x + cc_time.x * textureMoveSpeed.x;
          uv1.y = uv1.y + cc_time.x * textureMoveSpeed.y;
        #endif

        #if USE_NOISE_TEXTURE
          vec2 noise_uv = uv;
          #if USE_NOISE_MOVE
            vec2 speed = vec2(cc_time.x * noiseMoveSpeed.x ,cc_time.x * noiseMoveSpeed.y);
            noise_uv.xy = uv.xy + speed.xy;
          #endif
          
          vec4 offset = texture(noiseTexture,noise_uv);
          uv1.x = uv1.x + (offset.x - 0.5) * noiseStrength.x; 
          uv1.y = uv1.y + (offset.y - 0.5) * noiseStrength.y; 
        #endif
        col *= texture(mainTexture, uv1);
    #endif

    #if USE_MASK_COLOR
      col *= texture(maskTexture, v_uvM);
    #endif
    
    return CCFragOutput(col);
  }

  vec4 multiply () {
    vec4 col = color * tintColor;
    vec2 uv1 = uv;
    #if USE_TEXTURE
        #if USE_TEXTURE_MOVE
          uv1.x = uv1.x + cc_time.x * textureMoveSpeed.x;
          uv1.y = uv1.y + cc_time.x * textureMoveSpeed.y;
        #endif

        #if USE_NOISE_TEXTURE
          vec2 noise_uv = uv;
          #if USE_NOISE_MOVE
            vec2 speed = vec2(cc_time.x * noiseMoveSpeed.x ,cc_time.x * noiseMoveSpeed.y);
            noise_uv.xy = uv.xy + speed.xy;
          #endif
          
          vec4 offset = texture(noiseTexture,noise_uv);
          uv1.x = uv1.x + (offset.x - 0.5) * noiseStrength.x; 
          uv1.y = uv1.y + (offset.y - 0.5) * noiseStrength.y; 
        #endif
        col *= texture(mainTexture, uv1);
    #endif

    #if USE_MASK_COLOR
      col *= texture(maskTexture, v_uvM);
    #endif
    
    return CCFragOutput(col);
  }
  
}%
