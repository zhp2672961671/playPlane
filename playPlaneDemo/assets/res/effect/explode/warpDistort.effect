// Effect Syntax Guide: https://github.com/cocos-creator/docs-3d/blob/master/zh/material-system/effect-syntax.md

CCEffect %{
  techniques:
  - name: opaque
    passes:
    - vert: unlit-vs:vert # builtin header
      frag: unlit-fs:frag
      properties: &props
        mainTexture:    { value: white }
        tilingOffset:   { value: [1.0, 1.0, 0.0, 0.0] }
        mainColor:      { value: [1, 1, 1, 1], editor: { type: color } }

        nqTexture: { value: white }
        nqForce:  { value: 0.1 , editor: { parent: USE_NQ_MAP, slide: true, step: 0.001}}
        nqScale: { value: 1.0 , editor: { parent: USE_NQ_MAP, slide: true, range: [0.0, 5.0], step: 0.001}}
        nqLength: { value: 0.55 , editor: { parent: USE_NQ_MAP, slide: true, range: [0.0, 5.0], step: 0.001}}
        nqRotate: {value: 1.0 , editor: { parent: USE_NQ_MAP, slide: true, range: [-360.0, 360.0], step: 0.001}}

        distortionMap: { value: white }
        distortionPower: { value: 0.08 , editor: { parent: USE_DISTORTION_MAP}}
        distortionSpeed: {value: [0.1, 0.1], editor: { parent: USE_DISTORTION_MAP}}
        distortionRefraction: { value: 1.0 , editor: { parent: USE_DISTORTION_MAP}}
        distortionTilingOffset:   { value: [1.0, 1.0, 0.0, 0.0] , editor: { parent: USE_DISTORTION_MAP}}
      migrations: &migs
        properties:
          mainColor:    { formerlySerializedAs: color }
  - name: transparent
    passes:
    - vert: unlit-vs:vert # builtin header
      frag: unlit-fs:frag
      depthStencilState: &d1
        depthTest: true
        depthWrite: false
      blendState:
        targets:
        - blend: true
          blendSrc: src_alpha
          blendDst: one_minus_src_alpha
          blendSrcAlpha: src_alpha
          blendDstAlpha: one_minus_src_alpha
      properties: *props
      migrations: *migs
  - name: add
    passes:
    - vert: unlit-vs:vert
      frag: unlit-fs:frag
      rasterizerState: &r1 { cullMode: none }
      depthStencilState: *d1
      blendState:
        targets:
        - blend: true
          blendSrc: src_alpha
          blendDst: one
          blendSrcAlpha: src_alpha
          blendDstAlpha: one
      properties: *props
      migrations: *migs
  - name: alpha-blend
    passes:
    - vert: unlit-vs:vert
      frag: unlit-fs:frag
      rasterizerState: *r1
      depthStencilState: *d1
      blendState:
        targets:
        - blend: true
          blendSrc: src_alpha
          blendDst: one_minus_src_alpha
          blendSrcAlpha: src_alpha
          blendDstAlpha: one_minus_src_alpha
      properties: *props
      migrations: *migs
}%

CCProgram unlit-vs %{
  precision highp float;
  #include <legacy/input-standard>
  #include <builtin/uniforms/cc-global>
  #include <legacy/decode-base>
  #include <legacy/local-batch>
  #include <legacy/input-standard>
  #include <legacy/fog-vs>
  #include <legacy/shadow-map-vs>

  in vec4 a_color;

  uniform Constants {
    vec4 tilingOffset;
    vec4 distortionTilingOffset;
    float nqScale;
  };
  
  out vec4 v_position1;
  out vec4 v_position;
  out vec2 v_uv;
  #if USE_NQ_MAP
    out vec2 v_uv1;
    out float v_nqScale;
  #endif
  
  out vec4 v_color;

  #if USE_DISTORTION_MAP
    out vec2 v_uvD;
  #endif

  vec4 vert () {
    StandardVertInput In;
    CCVertInput(In);

    mat4 matWorld, matWorldIT;
    CCGetWorldMatrixFull(matWorld, matWorldIT);

    vec4 pos = matWorld * In.position;
    v_position1 = In.position;
    v_position = pos;

    #if USE_NQ_MAP
      float nqScale1 = 1.0 / nqScale;
      v_nqScale = nqScale;
      vec2 xyST = vec2(nqScale1, nqScale1); 
      vec2 xyZW = vec2(0, 0);
      xyZW = vec2((nqScale1 - 1.0) * -0.5, (nqScale1 - 1.0) * -0.5);   
      v_uv1 = a_texCoord * xyST + xyZW;
    #endif

    v_uv = a_texCoord * tilingOffset.xy + tilingOffset.zw;
    v_color = a_color;

    #if USE_DISTORTION_MAP
      v_uvD = a_texCoord * distortionTilingOffset.xy + distortionTilingOffset.zw;
    #endif

    CC_TRANSFER_FOG(pos);
    CC_TRANSFER_SHADOW(pos);

    return cc_matProj * (cc_matView * matWorld) * In.position;
  }
}%

CCProgram unlit-fs %{
  precision highp float;
  #include <legacy/output>
  #include <legacy/fog-fs>

  in vec2 v_uv;
  in vec4 v_position;
  in vec4 v_color;
  in vec4 v_position1;
  
  uniform sampler2D mainTexture;
  uniform sampler2D grabTexture;
  #if USE_NQ_MAP
    uniform sampler2D nqTexture;
    in float v_nqScale;
    in vec2 v_uv1;
  #endif

  #if USE_DISTORTION_MAP
    uniform sampler2D distortionMap;
    in vec2 v_uvD;
  #endif

  uniform Constant {
    vec4 mainColor;
    vec2 distortionSpeed;
    float distortionRefraction;
    float nqForce;
    float nqLength;
    float nqRotate;
    float distortionPower;
  };

  
  vec4 frag () {
    vec4 offsetColor = vec4(0, 0, 0, 1);
    vec2 v_uv4 = vec2(1, 1);
    #if USE_NQ_MAP
      vec2 v_uv2 = v_uv1;
      v_uv2 -= vec2(0.5, 0.5);
      vec2 tempUV = v_uv2;
      float nqRotate1 = nqRotate / 6.2831;
      v_uv2.x = cos(nqRotate1) * tempUV.x - sin(nqRotate1) * tempUV.y;  
      v_uv2.y = sin(nqRotate1) * tempUV.x + cos(nqRotate1) * tempUV.y;
      v_uv2 -= vec2(0.5, 0.5);

      if((v_uv1.x - 0.5) * (v_uv1.x - 0.5) + (v_uv1.y - 0.5) * (v_uv1.y - 0.5) < nqLength * nqLength){
          offsetColor = texture(nqTexture, v_uv2);
      }

      v_uv4 = vec2(offsetColor.r * nqForce, offsetColor.g * nqForce);
    #endif
    
    vec2 offsetUV = vec2(1, 1);
    #if USE_DISTORTION_MAP
      vec2 v_uv3 = v_uvD;
      v_uv3.x += cc_time.x * distortionSpeed.x;
      v_uv3.y += cc_time.x * distortionSpeed.y;
      vec4 disTex = texture(distortionMap, v_uv3);
      offsetUV = (-distortionRefraction*(disTex.xy * distortionPower - (distortionPower * 0.5)));
    #endif

    vec4 baseColor = mainColor;
    #if USE_VERTEX_COLOR
       baseColor *= v_color;
    #endif
    vec4 texColor = texture(mainTexture, v_uv + v_uv4 + offsetUV);
    baseColor *= texColor;

    return CCFragOutput(baseColor);
  }

}%
